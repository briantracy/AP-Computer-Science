{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red42\green47\blue60;\red42\green47\blue60;}
\margl1440\margr1440\vieww25060\viewh9900\viewkind0
\deftab720
\pard\pardeftab720\sl360

\f0\fs26 \cf2 Brian Tracy
\fs18 \cf0 \

\fs26 \cf2 AP Computer Science
\fs18 \cf0 \

\fs26 \cf2 Kuszmaul\

\fs18 \cf0 \

\fs26 \cf2 Vocab 14
\fs18 \cf0 \
\pard\pardeftab720
\cf0 \
\pard\pardeftab720\sl360

\fs26 \cf2 1 ) Stirling's formula binary tree
\fs18 \cf0 \

\fs26 \cf2 2 ) Stirling's formula tree set
\fs18 \cf0 \

\fs26 \cf2 3 ) Stirling's formula tree map
\fs18 \cf0 \

\fs26 \cf2 4 ) Stirling's formula hash function
\fs18 \cf0 \

\fs26 \cf2 5 ) Stirling's formula permutation
\fs18 \cf0 \

\fs26 \cf2 6 ) Stirling's formula derangement
\fs18 \cf0 \

\fs26 \cf2 7 ) binary tree \'a0\'a0\'a0\'a0\'a0\'a0\'a0tree set
\fs18 \cf0 \

\fs26 \cf2 8 ) binary tree \'a0\'a0\'a0\'a0\'a0\'a0\'a0tree map
\fs18 \cf0 \

\fs26 \cf2 9 ) binary tree \'a0\'a0\'a0\'a0\'a0\'a0\'a0hash function
\fs18 \cf0 \

\fs26 \cf2 10) binary tree \'a0\'a0\'a0\'a0\'a0\'a0\'a0permutation
\fs18 \cf0 \

\fs26 \cf2 11) binary tree \'a0\'a0\'a0\'a0\'a0\'a0\'a0derangement
\fs18 \cf0 \

\fs26 \cf2 12) tree set \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0tree map
\fs18 \cf0 \

\fs26 \cf2 13) tree set \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0hash function
\fs18 \cf0 \

\fs26 \cf2 14) tree set \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0permutation
\fs18 \cf0 \

\fs26 \cf2 15) tree set \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0derangement
\fs18 \cf0 \

\fs26 \cf2 16) tree map \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0hash function
\fs18 \cf0 \

\fs26 \cf2 17) tree map \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0permutation
\fs18 \cf0 \

\fs26 \cf2 18) tree map \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0derangement
\fs18 \cf0 \

\fs26 \cf2 19) hash function \'a0\'a0\'a0\'a0\'a0permutation
\fs18 \cf0 \

\fs26 \cf2 20) hash function \'a0\'a0\'a0\'a0\'a0derangement
\fs18 \cf0 \

\fs26 \cf2 21) permutation \'a0\'a0\'a0\'a0\'a0\'a0\'a0derangement
\fs18 \cf0 \
\pard\pardeftab720
\cf0 \
\pard\pardeftab720\sl360

\fs26 \cf2 1) If Stirling's Formula was applied to every element of a binary search tree, that tree would remain a binary search tree.
\fs18 \cf0 \

\fs26 \cf2 2) If Stirling\'92s Formula was applied to every element of a tree set, the set-ness would remain intact because each numbers factorial is unique to that number.
\fs18 \cf0 \

\fs26 \cf2 3) A tree map would be a good data structure to store a number and its relative factorial calculated by Stirling\'92s Formula because tree maps are efficient at entry.
\fs18 \cf0 \

\fs26 \cf2 4) Stirling\'92s Formula could be used as a hash function for integers as each numbers factorial is unique. (pretty useless and slow because each number is already unique on its own!)\
5) Permutations of numbers created by Stirling\'92s Formula are not likely to result in numbers generated by Stirling\'92s formula. \
6) Any derangement of the first 10 numbers produced by Stirling\'92s Formula will not be equal to any of the other first ten numbers.\
7) A tree set may store its members in a binary tree under the hood.\
8) A tree map may implement a binary tree behind the scenes as a way of storing its data.\
9) A binary tree\'92s hash function would have to take into consideration all of its nodes.\
10) A binary tree can generate a permutation of its data by making its so each tree\'92s children switch places.\
11) \cf3 A derangement of a binary search tree will almost always not be a binary search tree.\
12)  A tree set and tree map both internally use trees to store data.\
13) A tree set does not have to worry about hash functions as it does not need the hash of elements to them store elements correctly.\
14) Different permutations of the same tree set would be equal to the tree set itself because they are unordered.\
15)  Derangements of tree sets may differ in access speed as the data will be stored in the tree in a non-optimal way.\
16)  Tree maps do not keep track of the hash of elements computed by hash functions.\
17)  A tree map can make a permutation of its data by re adding all of its elements because there is guaranteed order to its data.\
18)  Deranging a tree map would affect performance because an unbalanced tree is slower to navigate that a balanced one.\
19)  The hash of a string and the hash of a permutation of that string should not be equal if a good hashing function is used.\
20)  An unordered collections hash value should not change if the contents are deranged. \
21)\cf2   Permutations and derangements are both types changes in the order of a list. 
\fs18 \cf0 \
\pard\pardeftab720
\cf0 \
\
}