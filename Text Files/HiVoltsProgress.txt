Brian Tracy
AP Computer Science
Kuszmaul

HiVolts Progress Report

											A Look at the Java.lang.Enum

Introduction
	Enums are a very versatile and powerful data type in Java. By grouping together sets of constants, Enums can do away with code clutter, magic numbers, and stray final variables. But Enums are much more than a simple group of values; they can act as objects and be held as references. 

On Enums and Constants
	An Enum (Enumeration) in its simplest form is a set of compile-time constants that all share a common theme. In this aspect, they are very much like their counterparts in C.

	// enum.c
	enum Day 
	{
		monday = 0,
		tuesday = 1,
		...
	}; 

	// enum.java
	public enum Day {
		monday,tuesday, ...
	} 

	The resemblence is striking, a testament to the fact that a barebones Java enum is the equivalant of that in C.


On Enums and References
	Enums can be held as references, much like classes in Java. Enums are types in Java. This allows them to be declared and passed around.

	// enum.java
	public enum Day {
		monday,tuesday, ...
	}

	public void example() {
		Day today = Day.monday;
		tellMeAbout(today);
	}

	public void tellMeAbout(Day today) {
		if (today == Day.monday) {
			System.out.println("Mondays are bad");
		} else {
			System.out.println("Today is not monday");
		}
	}

	This example shows how like all other types and classes, Enums too can be referenced and used as if they were any other type. Enums can be compared, assigned, and modified like all other references. This is just one example of the power of the Enum.


On Enums and Objects
	Enums are objects in Java, much like classes. They can have constructors, fields, and associated methods.

	// enum.java
	public enum Day {
		monday(false), tuesday(true), ...
		private final boolean isGoodDay;

		public Day(boolean isGoodDay) {
			this.isGoodDay = isGoodDay;
		}

		public boolean isGoingToBeFun() {
			return this.isGoodDay;
		}
	}

	Day today = Day.tuesday;
	if (today.isGoingToBeFun) {		// true
		System.out.println("yay");
	}

	In this example, the elements of the enumeration are given values (in this case booleans). The constructor is automatically called when an Enum is created, and into it is passed the state of that specific element in the enumeration. For example, when Day.monday is created, its constructor is passed false, as this is the value assigned to monday in the Enum. By having the capability of public and private variables, associated methods, and constructors, Enums are not only simple collections of constants, but full blown objects. This asset of Enums makes them one of the more powerful standard data types of Java.


On Enums and Relevance
	Enums are very relevant to my HiVolts project. One of the biggest aspects of the HiVolts program is how it goes about representing the logic of the game. To accomplish this, I chose to use a two dimensional array of Enums to represent the game board. These enums represent every state that a slot on the board could be. 

	// Entity.java
	public enum Entity {
    	Empty, Mho, Fence, Player
	}

	These four states represent the possible values of the slots on the board, and are the foundation for the logic of the game. I chose to use Enums for the following reasons.
		1. Nothing else must be known about a particular slot other than what is in it.
		2. These slots do not need associated methods, getters, or setters. They simply are one state or the other

	In this case where a full object would have been to much, and a single integer would not have been enough, an Enum satisfies the requirements of the program by accurately describing the state of the game board.