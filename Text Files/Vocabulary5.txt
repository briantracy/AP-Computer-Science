Brian Tracy
AP Computer Science
Kuszmaul

Vocab 5

1 ) Polymorphism          Interface
2 ) Polymorphism          Base Class
3 ) Polymorphism          Sub Class
4 ) Polymorphism          Super Class
5 ) Polymorphism          Reference
6 ) Polymorphism          Inheritance Heirarchy
7 ) Interface             Base Class
8 ) Interface             Sub Class
9 ) Interface             Super Class
10) Interface             Reference
11) Interface             Inheritance Heirarchy
12) Base Class            Sub Class
13) Base Class            Super Class
14) Base Class            Reference
15) Base Class            Inheritance Heirarchy
16) Sub Class             Super Class
17) Sub Class             Reference
18) Sub Class             Inheritance Heirarchy
19) Super Class           Reference
20) Super Class           Inheritance Heirarchy
21) Reference             Inheritance Heirarchy

1) Methods declared in an interface can be polymorphic.
2) A base class’s methods can be polymorphic if the base class’s subclasses override them.
3) Polymorphism is achieved when several sub classes all provide different implementations of the same method.
4) If a method is not polymorphic and is not implemented by a subclass, the superclass's implementation will be used.
5) A reference type can have polymorphic methods.
6) Whether or not a method is polymorphic is dependant on the inheritance chain of a class.
7) If a base class implements an interface, then all of its subclasses do too.
8) Just because a sub class implements an interface does not mean that its super classes do.
9) Like classes inherit from super classes, interfaces can inherit from eachother.
10) If you have a reference to an object that implements a certain interface, you can call the methods of that interface on the object and have confidence that they will be implemented.
11) Like classes, Interfaces can have an inheritance hierarchy.
12) A subclass can do anything that a base class can, and more.
13) A base class is always at the top of an inheritance chain while a super class does not have to be.
14) A reference to a base class type can be assigned to an instance of any one of its sub classes.
15) A base class is always the top of an inheritance hierarchy.
16) A sub class inherits from a super class.
17) A sub class is an object and can therefore be referenced.
18) A sub class is lower on the inheritance hierarchy than its superclass.
19) A super class's constructor can be referenced by a subclass through the use of the super keyword.
20) A super class is above its sub classes in an inheritance hierarchy.
21) A reference is always part of an inheritance hierarchy because all objects automatically inherit from Object in Java.


 