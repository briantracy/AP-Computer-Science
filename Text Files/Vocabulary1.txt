Brian Tracy 
AP Computer Science 
Kuszmaul

Vocabulary 1


1 ) Generalization  Specification
2 ) Generalization  Specialization
3 ) Generalization  Requirement
4 ) Generalization  Abstraction
5 ) Generalization  Function
6 ) Generalization  Program Counter
7 ) Specification   Specialization
8 ) Specification   Requirement
9 ) Specification   Abstraction
10) Specification   Function
11) Specification   Program Counter
12) Specialization  Requirement
13) Specialization  Abstraction
14) Specialization  Function
15) Specialization  Program Counter
16) Requirement     Abstraction
17) Requirement     Function
18) Requirement     Program Counter
19) Abstraction     Function
20) Abstraction     Program Counter
21) Function        Program Counter

1) A specification provides a way to satisfy one requirement, while a generalization describes a way to satisfy multiple requirements.
2) While generalization is the creation of superclasses to bring together shared attributes of other classes, specialization is the the creation of subclasses to extend away from a superclass.
3) Sometimes the use of generalization is a requirement for good program design.
4) Generalization is a form of abstraction as it abstracts away things like similar properties and methods in a single superclass.
5) Two classes sharing similar function(s) is often a sign that generalization is needed.
6) When generalization is used, the program counter often jumps around as it goes to the superclasses implementation of a method.
7) When the specification calls for an over-bloated object, think about breaking the object up into smaller pieces with specialization.
8) The specifications of a project contain all of the requirements for that project.
9) When the specification leads you to write redundant code, abstraction is your best friend to help consolidate repetitive code.
10) Before writing a function, leave a comment clearly stating its specification(s).
11) A specification is usually written with no concern with what the program counter will be doing, as specifications normally focus on the less technical side of the program such as class lists and functionality.
12) If a requirement of your program is to have multiple classes, specialization can be used to increase the number of classes while having each class still retain a clear purpose.
13) Specialization and abstraction serve opposite purposes; the former makes a program more complex by increasing the number of classes while the ladder decreases complexity by reducing code bloat.
14) Specialization is needed when some of a classes functions have a different purpose that that of the entire class.
15) When specialization is used, the program flow, and as a result, the program counter's location change frequently as many superclasses are all contributing code to the overall application. 
16) If the requirement of a program forces a programmer to repeat him/herself, abstraction is a powerful process to help the programmer write concise code.
17) The requirement(s) of a class usually make it implement at least one method to serve a purpose.
18) One requirement of the program counter is not to move in a linear fasion. With the use of loops and functions, the program counter can jump to pre-determined points.
19) A typical example of abstraction is to make a function out of a process that is hard-coded in at several points.
20) As abstraction can lead to the use of several functions, the programs counter's progress becomes hard to track as it jumps in and out of functions.
21) The program counter jumps to the top of a function when it is called.

