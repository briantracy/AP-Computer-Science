Brian Tracy
AP Computer Science
Vocabulary 11

1 ) Abstract class O notation
2 ) Abstract class Search
3 ) Abstract class Insertion
4 ) Abstract class Deletion
5 ) Abstract class List
6 ) Abstract class Set
7 ) O notation     Search
8 ) O notation     Insertion
9 ) O notation     Deletion
10) O notation     List
11) O notation     Set
12) Search         Insertion
13) Search         Deletion
14) Search         List
15) Search         Set
16) Insertion      Deletion
17) Insertion      List
18) Insertion      Set
19) Deletion       List
20) Deletion       Set
21) List           Set

1) Big O notation can be used on any implemented methods of an abstract class.
2) An abstract class can provide a method stub for a search algorithm.
3) An arraylist is not an abstract class so it can be instantiated and can implement methods like Insertion methods.
4) An abstract class may define methods for deletion, but cannot implement them.
5) List is not an abstract class, but an abstract interface defining methods that all concrete lists must implement.
6) Abstract classes cannot be inserted into a set because they cannot be instantiated.
7) The O notation of most search algorithms is linear as most algorithms at worst case have to traverse through all data to find a specific element.
8) The O notation for inserting into a Set is constant or O(1).
9) The O notation for removing an item from a set is constant.
10) The time complexity of getting elements from a list in java can be described in O notation as O(1).
11) Most operations for sets can be described as constant in Big O notation.
12) Searching and insertion are two operations that arraylists are optimized for.
13) Deletion algorithms do not always have to perform a search before removing an element from a collection.
14) Searching a list requires the search algorithm to check each element at worst case. 
15) Searching for elements in a set takes constant time.
16) The time it takes to perform an Insertion or deletion in an array list is dependent upon where you are inserting or deleting from.
17) Insertion into a list at the last element will be faster than inserting into the middle.
18) Insertion into a set is constant unless you are using a tree set.
19) Deleting the last element of a list will be faster than deleting an element in the middle because then the list does not have to be rearranged.
20) Deletion from a set will take constant time.
21) Lists are ordered collections while sets are not.
