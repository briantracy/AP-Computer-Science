{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww22960\viewh10120\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs32 \cf0 Brian Tracy\
AP Computer Science\
Kuszmaul\
\
The Priority Queue\
\
\
What is a Queue\
	A queue, like an array, is an ordered collection. The way objects are ordered in a queue is based on how they are inserted into the queue. Like a stack, time of insertion is hugely critical. A stack is a LIFO data structure, Last In First Out. The more recently added an object is into a stack, the faster it will come out of the stack. The opposite is true for a queue. A queue is a FIFO data structure, First In First Out. A queue is like a line at the movies in the sense that the earlier you get into the line, the earlier you get out. The first object added into a queue will be the first object out.\
\
What is a Priority Queue\
	A priority queue is an ordered collection. Each object in a priority queue has an associated \'93priority\'94 that helps order it. An objects position in a priority queue is relative to its priority. Objects with higher priorities are served before objects with lower priorities. In the case of a tie in priority, the object who was put into the queue first will be served. In this way, a priority queue is similar to a queue. A practical use of priority queues is in the time sharing functionality of operating systems. Tasks that need to be run by the CPU will be put in a priority queue and when one task is finished, the next task in the queue is selected. This makes sure that the CPU is always executing the most important tasks and that there is no ambiguity as to which process is run next.\
\
Implementation in Java\
	The implementation in Java of a priority queue is the java.util.PriorityQueue. This is a generic class that takes a Comparator object that ranks its objects. This comparator can be assigned to the priority queue through the use of a constructor.  Subclassing Comparator and providing your own implementation for the compareTo method allows highly customizable priority queues. \
\
My Implementation Part 1\
	Instead of subclassing any other collections or implementing external interfaces, I decided to start from scratch to make a priority queue. After preliminary research, I found out that priority queues are often implemented as heaps. I looked into Java STL heaps but came up empty. I realized that a heap was too complicated for me to implement on my own, so I abandoned this angle. For a better idea of what underlying data type I should use, I looked to the requirements. The only requirement was that all operations had to perform in better than O(n) time. This immediately got me thinking about trees because one of the huge benefits of trees is the fact that most of their operations are O(log n). Trees looked like the way to go, so I started searching for tree implementations in Java. Heap had already been ruled out, so I went to TreeSet. I decided on tree set not only because of its great performance, but because it implements the NavigableSet interface. The NavigableSet interface allows ordering based on a comparator (just like the PriorityQueue). This was the perfect combination for the creation of my priority queue. All methods could be achieved in O(log n) and the implementation was super small. Almost all heavy lifting was done by the TreeSet and only minor tweaks were necessary to satisfy the requirements for priority queues. There was only one drawback and that was that because of the nature of Sets, duplicate entries are not allowed. Everything was perfect except for this huge drawback. This is where I stopped working on implementation 1 and began looking for a new solution that could handle duplicates. The final product for this first try is found in NonDuplicatingPriorityQueue.java. It satisfies all requirements but does not allow duplicates. \
\
My Implementation 2\
	Following the near miss with NonDuplicatingPriorityQueue, I needed a new data structure that could meet the performance requirements, but at the same time, handle duplicates. I knew trees were the right move, so I looked for some more classes that implemented trees under the hood. The choice I made was TreeMap. By itself, TreeMap cannot hold duplicate keys, so I needed a way to fit them in. I decided to map objects in the priority queue to duplicates of that object. The basic setup is as follows (assume T is the type of object being held in the priority queue):\
		Map<T, FastList<T>> backingStore = new TreeMap<T, FastList<T>>\
		// map all elements in the queue to a list of duplicates that each element might have. \
		// FastList is basically an array list.\
		\
By using this approach, I am mapping each object in the queue to a possible any number of other objects with the same priority. In case of duplicates, simply return the last element in the duplicate array. Best case, there are no duplicates and retrieval will be O(log n). Worst case, there are a few duplicates and now we only have to perform an O(n) operation on a small fraction of the elements in the queue (shifting after removal from array list). \
\
Performance\
	The sole requirement was that all operations must perform in better than O(n) time. For the NonDuplicatingPriorityQueue, this is easily accomplished as all operations are O(log n)\
\
NonDuplicatingPriorityQueue\
Add/Offer: O(log n)\
Remove/Poll: O(log n)\
Element/Peek: O(log n)\
Size: O(1)\
\
PriorityQueue\
Add/Offer: O(log n) + O(numberOfDuplicates)*\
Remove/Poll: O(log n) + O(numberOfDuplicates)*\
Element/Peek: O(log n) + O(1)**\
Size: O(1)\
\
* If there are n duplicates of the element, then n elements must be shifted in the duplicate array list. This is far better than every element in the queue.\
** This second O(1) operation can be ignored if there are no duplicates.\
These great time complexities can be attributed to the efficiency of the Tree. Proof of this logarithmic complexity can be seen in the next section.\
\
Proof Of Performance\
	The statistics in the previous section are attained by looking at my own source code and by looking at how each collection I used was implemented (I can access the Java source code through my IDE). All operations are far better than O(n) and the best way to prove this is graphically. In the Main.java file, a performance test case is conducted to prove the logarithmic time complexity of the queues. Here are the results when graphed. More on these graphs is found in the next section along with proof of accuracy of implementation.\

\fs24 {{\NeXTGraphic allowdup.png \width10660 \height8780
}¬}{{\NeXTGraphic nondup.png \width10640 \height8800
}¬}
\fs32 \
\
		}