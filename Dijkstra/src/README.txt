Brian Tracy
AP Computer Science
Kuszmaul

Dijkstra's Algorithm

Notes:      Check out the attached jpeg and sample output at the bottom of this file.
            After reading this file, to best understand this project read the .java files in this order:
                1. Main.java  - Where we begin execution and create the Adjacency Matrix
                2. Node.java  - The guts of the Graph
                3. Graph.java - The brains behind the Graph


INTEGRATION WITH GIT VERSION CONTROL SYSTEM:

    For this project, one of the requirements was to keep Mr. Kuszmaul updated on our progress. The suggested way to
    do this was to periodically submit your .java files to Schoology but I saw two problems with this.
        1. The required repetitive downloading of .java files is not conducive of a good workflow when grading
            ~40 different student's work.
        2. It is difficult to see progress over several different uploads, no way to view the big picture.

    My solution to this was to leverage an existing technology that I am already using. I update a git repository with
    all of my APCS code regularly, this project is no different. By using git, Mr. K can track my commits to keep in touch
    with how I am doing.

    By using git, I have solved both of the above problems.
        1. No downloads necessary. With the online version of GitHub, any public repositories' commits are in the public domain
        and can be viewed without downloading anything.
        2. Committing to a git repository is an additive process, each commit building upon the existing code. Git does a very
        nice job of highlighting the differences between commits by using the `git diff` tool. This program is naturally run
        when viewing multiple commits, allowing people to see exactly what I am adding and subtracting each commit.

    By using git, you can see exactly which files I changed and how exactly I changed them. The data is presented in a
    very easy to understand fashion, highlighting the differences between commits.

    A link to my GitHub's commit list can be found here (https://github.com/briantracy/AP-Computer-Science/commits/master).
    Any commit labeled "Dijkstra <number>" is of interest.


VISUAL PROOF OF ALGORITHM:

    In the main method of this project, I included a test case of the algorithm. This test case is in the form of an
    adjacency matrix. I have provided a picture of this Adjacency Matrix visualized as a graph in an attached .jpg

    The picture contains an image of the graph along with a solved table generated by Dijkstra's Algorithm.

DOCUMENTATION:

    I have followed the given guide for documenting code. The documentation is extensive and it is all in the actual
    .java files so there is not much regarding the algorithm in this text file.


SAMPLE OUTPUT:

Node A | Distance 0  | Last Visited A | The shortest path between [Node A] and [The Starting Node (A)] is [A].
Node B | Distance 3  | Last Visited A | The shortest path between [Node B] and [The Starting Node (A)] is [B-A].
Node C | Distance 7  | Last Visited B | The shortest path between [Node C] and [The Starting Node (A)] is [C-B-A].
Node D | Distance 9  | Last Visited C | The shortest path between [Node D] and [The Starting Node (A)] is [D-C-B-A].